<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bé Vui Học Bảng Cửu Chương</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Baloo 2', cursive;
            background: linear-gradient(135deg, #a1c4fd, #c2e9fb);
            overflow: hidden;
            position: relative;
        }
        .app-container {
            background-color: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.9);
        }
        .btn {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        .btn:active {
            transform: translateY(1px);
        }
        .btn-table.active {
            background-color: #f87171; /* red-400 */
            color: white;
            transform: scale(1.05);
            border: 2px solid #ef4444;
        }
        .btn-table.selected-for-review {
            background-color: #fb923c; /* orange-400 */
            color: white;
            transform: scale(1.05);
            border: 2px solid #f97316;
        }
        .btn-mode.active {
            background-color: #60a5fa; /* blue-400 */
            color: white;
        }
        .feedback {
            transition: all 0.5s ease;
        }
        .character {
            position: absolute;
            bottom: 20px;
            width: 150px;
            height: auto;
            transition: transform 0.5s ease;
        }
        .char-left { left: 20px; }
        .char-right { right: 20px; }
        @media (max-width: 768px) {
            .character { width: 100px; bottom: 10px; }
            .char-left { left: 5px; }
            .char-right { right: 5px; }
        }
        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #f00;
            opacity: 0;
            animation: confetti-fall 2s ease-out forwards;
        }
        @keyframes confetti-fall {
            0% { transform: translateY(-100px) rotate(0deg); opacity: 1; }
            100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }
        }
        .timer-bar {
            transition: width 1s linear;
        }
        .keypad-btn {
            width: 70px;
            height: 70px;
            font-size: 1.8rem; /* Adjusted for better fit */
            border-radius: 1rem; /* rounded-2xl */
        }
        @media (max-width: 400px) {
            .keypad-btn {
                width: 60px;
                height: 60px;
                font-size: 1.5rem;
            }
        }
        #answer-display {
             transition: border-color 0.3s ease;
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
    <!-- Background Characters -->
    <img src="img/unicorn.png" alt="Nhân vật hoạt hình ong" class="character char-left">
    <img src="img/dinasour.png" alt="Nhân vật hoạt hình khủng long" class="character char-right">

    <div id="confetti-container" class="absolute inset-0 pointer-events-none"></div>

    <div class="app-container w-full max-w-3xl p-6 md:p-8 rounded-3xl shadow-2xl text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-pink-500 mb-4" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.1);">Bé Vui Học Cửu Chương</h1>
        
        <!-- Mode Selection -->
        <div id="mode-selection" class="mb-6">
            <p class="text-gray-600 mb-4">Bé muốn học theo kiểu nào?</p>
            <div class="flex justify-center gap-4">
                <button id="mode-learn-btn" class="btn btn-mode bg-white text-gray-700 font-bold py-2 px-6 rounded-full active">Học từng bảng</button>
                <button id="mode-review-btn" class="btn btn-mode bg-white text-gray-700 font-bold py-2 px-6 rounded-full">Ôn tập tổng hợp</button>
            </div>
        </div>
        
        <!-- Table Selection -->
        <div id="table-selection-area">
             <p id="selection-prompt" class="text-gray-600 mb-6">Hãy chọn một bảng cửu chương để bắt đầu nhé!</p>
             <div id="table-selection" class="grid grid-cols-5 gap-3 mb-6">
                <!-- Buttons will be generated by JS -->
            </div>
            <button id="start-review-btn" class="btn bg-green-500 hover:bg-green-600 text-white text-xl font-bold py-3 px-8 rounded-full hidden">Bắt đầu ôn tập!</button>
        </div>

        <!-- Game Area -->
        <div id="game-area" class="space-y-4 hidden">
            <!-- Stats Display -->
            <div id="stats-display" class="grid grid-cols-3 gap-4 text-white text-xl font-bold mb-4">
                <div id="score-display" class="bg-blue-400 p-2 rounded-lg">Điểm: 0</div>
                <div id="question-counter" class="bg-purple-400 p-2 rounded-lg">Câu: 1/20</div>
                <div id="timer-display" class="bg-pink-400 p-2 rounded-lg">Thời gian: 10</div>
            </div>
            <!-- Timer Bar -->
            <div class="w-full bg-gray-200 rounded-full h-4 mb-4 shadow-inner">
                <div id="timer-bar" class="bg-gradient-to-r from-green-400 to-yellow-300 h-4 rounded-full timer-bar" style="width: 100%"></div>
            </div>

            <div id="problem-display" class="text-6xl font-bold text-indigo-600 bg-white p-6 rounded-2xl shadow-inner">
                ? x ? = ?
            </div>

            <!-- Answer and Keypad Area -->
            <div class="flex flex-col items-center justify-center gap-4 mt-4">
                <!-- Answer Display -->
                <div id="answer-display" class="text-4xl text-center w-48 h-16 p-3 border-4 border-yellow-400 rounded-xl bg-white flex items-center justify-center text-gray-700 font-bold">
                    &nbsp; <!-- non-breaking space for initial height -->
                </div>

                <!-- Keypad -->
                <div id="keypad" class="grid grid-cols-3 gap-3 mt-2">
                    <!-- Keypad buttons will be generated by JS -->
                </div>
            </div>
        </div>
        
         <!-- Final Score Area -->
        <div id="final-score-area" class="hidden text-center p-8">
            <h2 class="text-4xl font-bold text-green-500 mb-2">Hoàn thành!</h2>
            <p class="text-2xl text-gray-700 mb-4">Tổng điểm của bé là:</p>
            <p id="final-score" class="text-7xl font-bold text-yellow-500 mb-6">0</p>
            <div class="flex justify-center gap-8 text-2xl text-gray-600 mb-8">
                <p>✅ Đúng: <span id="correct-count" class="font-bold text-green-600">0</span></p>
                <p>❌ Sai: <span id="incorrect-count" class="font-bold text-red-600">0</span></p>
            </div>
            <button id="play-again-btn" class="btn bg-blue-500 hover:bg-blue-600 text-white text-2xl font-bold py-3 px-8 rounded-full">Chơi lại</button>
        </div>


        <!-- Feedback Message -->
        <div id="feedback-message" class="feedback text-3xl font-bold mt-4 h-12"></div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // UI Elements
    const tableSelectionContainer = document.getElementById('table-selection');
    const gameArea = document.getElementById('game-area');
    const problemDisplay = document.getElementById('problem-display');
    const feedbackMessage = document.getElementById('feedback-message');
    const confettiContainer = document.getElementById('confetti-container');
    const charLeft = document.querySelector('.char-left');
    const charRight = document.querySelector('.char-right');
    const modeLearnBtn = document.getElementById('mode-learn-btn');
    const modeReviewBtn = document.getElementById('mode-review-btn');
    const selectionPrompt = document.getElementById('selection-prompt');
    const startReviewBtn = document.getElementById('start-review-btn');
    const tableSelectionArea = document.getElementById('table-selection-area');
    const modeSelection = document.getElementById('mode-selection');
    const statsDisplay = document.getElementById('stats-display');
    const scoreDisplay = document.getElementById('score-display');
    const questionCounterDisplay = document.getElementById('question-counter');
    const timerDisplay = document.getElementById('timer-display');
    const timerBar = document.getElementById('timer-bar');
    const finalScoreArea = document.getElementById('final-score-area');
    const finalScoreDisplay = document.getElementById('final-score');
    const playAgainBtn = document.getElementById('play-again-btn');
    const answerDisplay = document.getElementById('answer-display');
    const keypad = document.getElementById('keypad');
    const correctCountDisplay = document.getElementById('correct-count');
    const incorrectCountDisplay = document.getElementById('incorrect-count');

    // Game State
    let gameMode = 'learn'; // 'learn' or 'review'
    let selectedTablesForReview = [];
    let currentTable = 0;
    let num1, num2, correctAnswer;
    let score = 0;
    let questionCounter = 0;
    let correctCount = 0;
    let incorrectCount = 0;
    const TOTAL_QUESTIONS = 20;
    let timerInterval;
    let timerValue = 10;
    let isAnswering = false;
    let currentAnswerString = '';
    
    // Audio State
    let audioContext;

    // --- INITIALIZATION ---
    function init() {
        createTableButtons();
        createKeypad();
        setupEventListeners();
        resetUI();
    }
    
    // --- AUDIO FUNCTIONS ---
    // Initialize AudioContext on first user interaction to comply with browser policies
    function initAudio() {
        if (!audioContext) {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.error("Web Audio API is not supported in this browser");
            }
        }
    }

    // Play a clap/pop sound for correct answers
    function playCorrectSound() {
        if (!audioContext) return;

        // This function creates a single "pop" sound at a given time
        const playClap = (startTime) => {
            const duration = 0.2;

            // Create a buffer for white noise
            const bufferSize = audioContext.sampleRate * duration;
            const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);
            const output = buffer.getChannelData(0);
            for (let i = 0; i < bufferSize; i++) {
                output[i] = Math.random() * 2 - 1;
            }

            // Create a source for the noise
            const noiseSource = audioContext.createBufferSource();
            noiseSource.buffer = buffer;

            // Create a filter to shape the noise
            const bandpass = audioContext.createBiquadFilter();
            bandpass.type = 'bandpass';
            bandpass.frequency.value = 1500 + Math.random() * 500; // Add variation
            bandpass.Q.value = 1.5;

            // Create a gain node for the envelope
            const gainNode = audioContext.createGain();
            const startGain = Math.random() * 0.2 + 0.5; // Vary volume
            gainNode.gain.setValueAtTime(0, startTime);
            gainNode.gain.linearRampToValueAtTime(startGain, startTime + 0.01);
            gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);

            // Connect the nodes
            noiseSource.connect(bandpass);
            bandpass.connect(gainNode);
            gainNode.connect(audioContext.destination);

            // Play the sound
            noiseSource.start(startTime);
            noiseSource.stop(startTime + duration);
        };

        const now = audioContext.currentTime;
        // Play 3 claps in quick succession to simulate applause
        playClap(now);
        playClap(now + 0.2);
        playClap(now + 0.4);
        playClap(now + 0.6);
        playClap(now + 0.8);
        playClap(now + 1);
    }

    // Play a low "buzz" for incorrect answers
    function playIncorrectSound() {
        if (!audioContext) return;
        
        const playBuzz = (startTime) => {
            const osc = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            const duration = 0.3; // Shorter duration for each buzz

            osc.type = 'sawtooth';
            osc.frequency.setValueAtTime(120, startTime);
            osc.frequency.exponentialRampToValueAtTime(80, startTime + duration);
            gainNode.gain.setValueAtTime(0.3, startTime);
            gainNode.gain.exponentialRampToValueAtTime(0.00001, startTime + duration);

            osc.connect(gainNode);
            gainNode.connect(audioContext.destination);
            osc.start(startTime);
            osc.stop(startTime + duration);
        };

        const now = audioContext.currentTime;
        // Play two buzz sounds in quick succession
        playBuzz(now);
        playBuzz(now + 0.2);
    }


    function createTableButtons() {
        for (let i = 1; i <= 10; i++) {
            const button = document.createElement('button');
            button.textContent = `Bảng ${i}`;
            button.dataset.table = i;
            button.className = 'btn btn-table bg-pink-300 hover:bg-pink-400 text-white font-bold py-3 px-4 rounded-xl text-lg';
            button.addEventListener('click', handleTableSelection);
            tableSelectionContainer.appendChild(button);
        }
    }

    function createKeypad() {
        const keyOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9, 'Xóa', 0, 'OK'];
        keyOrder.forEach(key => {
            const button = document.createElement('button');
            button.textContent = key;
            button.className = 'btn keypad-btn font-bold';
            
            if (typeof key === 'number') {
                button.classList.add('bg-white', 'hover:bg-gray-100', 'text-gray-800');
                button.addEventListener('click', () => appendNumber(key));
            } else if (key === 'Xóa') {
                button.classList.add('bg-orange-400', 'hover:bg-orange-500', 'text-white', 'text-xl');
                button.addEventListener('click', clearAnswer);
            } else if (key === 'OK') {
                button.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white', 'text-xl');
                button.addEventListener('click', handleAnswerSubmission);
            }
            keypad.appendChild(button);
        });
    }

    function setupEventListeners() {
        modeLearnBtn.addEventListener('click', () => switchMode('learn'));
        modeReviewBtn.addEventListener('click', () => switchMode('review'));
        startReviewBtn.addEventListener('click', startReview);
        playAgainBtn.addEventListener('click', resetUI);
    }
    
    function resetUI() {
        gameMode = 'learn';
        switchMode('learn');
        finalScoreArea.classList.add('hidden');
        modeSelection.classList.remove('hidden');
        tableSelectionArea.classList.remove('hidden');
        gameArea.classList.add('hidden');
        feedbackMessage.textContent = '';
        document.querySelectorAll('.btn-table').forEach(btn => btn.className = 'btn btn-table bg-pink-300 hover:bg-pink-400 text-white font-bold py-3 px-4 rounded-xl text-lg');
    }

    // --- MODE SWITCHING ---
    function switchMode(newMode) {
        initAudio(); // Ensure audio is ready when mode is switched
        gameMode = newMode;
        gameArea.classList.add('hidden');
        feedbackMessage.textContent = '';
        document.querySelectorAll('.btn-table').forEach(btn => {
            btn.classList.remove('active', 'selected-for-review');
        });
        
        if (gameMode === 'learn') {
            modeLearnBtn.classList.add('active');
            modeReviewBtn.classList.remove('active');
            selectionPrompt.textContent = 'Hãy chọn một bảng cửu chương để bắt đầu nhé!';
            startReviewBtn.classList.add('hidden');
        } else { // review mode
            modeLearnBtn.classList.remove('active');
            modeReviewBtn.classList.add('active');
            selectionPrompt.textContent = 'Tâm An hãy chọn bảng cửu chương muốn ôn tập!';
            selectedTablesForReview = [];
            updateStartReviewButton();
        }
    }

    // --- GAME LOGIC ---
    function handleTableSelection(event) {
        initAudio(); // Ensure audio is ready on first interaction
        const clickedButton = event.currentTarget;
        const tableNum = parseInt(clickedButton.dataset.table);

        if (gameMode === 'learn') {
            document.querySelectorAll('.btn-table').forEach(btn => btn.classList.remove('active'));
            clickedButton.classList.add('active');
            currentTable = tableNum;
            startGame();
        } else { // review mode
            if (selectedTablesForReview.includes(tableNum)) {
                selectedTablesForReview = selectedTablesForReview.filter(t => t !== tableNum);
                clickedButton.classList.remove('selected-for-review');
            } else {
                selectedTablesForReview.push(tableNum);
                clickedButton.classList.add('selected-for-review');
            }
            updateStartReviewButton();
        }
    }
    
    function updateStartReviewButton() {
        if (gameMode === 'review' && selectedTablesForReview.length > 0) {
            startReviewBtn.classList.remove('hidden');
        } else {
            startReviewBtn.classList.add('hidden');
        }
    }

    function startGame() {
        modeSelection.classList.add('hidden');
        tableSelectionArea.classList.add('hidden');
        gameArea.classList.remove('hidden');
        statsDisplay.classList.add('hidden'); // Hide stats in learn mode
        isAnswering = true;
        generateProblem();
    }

    function startReview() {
        initAudio(); // Ensure audio is ready on first interaction
        modeSelection.classList.add('hidden');
        tableSelectionArea.classList.add('hidden');
        gameArea.classList.remove('hidden');
        statsDisplay.classList.remove('hidden'); // Show stats in review mode
        
        score = 0;
        questionCounter = 0;
        correctCount = 0;
        incorrectCount = 0;
        isAnswering = true;
        updateStats();
        generateProblem();
    }

    function generateProblem() {
        if (gameMode === 'review' && questionCounter >= TOTAL_QUESTIONS) {
            endReviewSession();
            return;
        }

        clearAnswer();
        answerDisplay.classList.remove('border-green-500', 'border-red-500');
        answerDisplay.classList.add('border-yellow-400');
        feedbackMessage.textContent = '';
        isAnswering = true;

        if (gameMode === 'learn') {
            num1 = currentTable;
            num2 = Math.floor(Math.random() * 10) + 1;
        } else { // review mode
            questionCounter++;
            num1 = selectedTablesForReview[Math.floor(Math.random() * selectedTablesForReview.length)];
            num2 = Math.floor(Math.random() * 10) + 1;
            startTimer();
            updateStats();
        }
        
        correctAnswer = num1 * num2;
        problemDisplay.textContent = `${num1} x ${num2} = ?`;
    }

    function handleAnswerSubmission() {
        if (!isAnswering) return;
        
        if (currentAnswerString === '') {
            feedbackMessage.textContent = 'Hãy nhập số nhé!';
            feedbackMessage.className = 'feedback text-3xl font-bold mt-4 h-12 text-yellow-500';
            return;
        }

        isAnswering = false; // Prevent multiple submissions
        if (gameMode === 'review') {
            clearInterval(timerInterval);
        }

        const userAnswer = parseInt(currentAnswerString);
        
        let isCorrect = (userAnswer === correctAnswer);
        
        if (isCorrect) {
            playCorrectSound();
            if (gameMode === 'review') correctCount++;
            feedbackMessage.textContent = 'Đúng rồi! Bé Tâm An giỏi quá!';
            feedbackMessage.className = 'feedback text-3xl font-bold mt-4 h-12 text-green-500';
            answerDisplay.classList.remove('border-yellow-400', 'border-red-500');
            answerDisplay.classList.add('border-green-500');
            triggerConfetti();
            charLeft.style.transform = 'translateY(-30px) rotate(-10deg)';
            charRight.style.transform = 'translateY(-30px) rotate(10deg)';
            if (gameMode === 'review') {
                score += timerValue;
                updateStats();
            }
        } else {
            playIncorrectSound();
            if (gameMode === 'review') incorrectCount++;
            feedbackMessage.textContent = `Chưa đúng! Đáp án là ${correctAnswer}`;
            feedbackMessage.className = 'feedback text-3xl font-bold mt-4 h-12 text-red-500';
            answerDisplay.classList.remove('border-yellow-400', 'border-green-500');
            answerDisplay.classList.add('border-red-500');
            charLeft.style.transform = 'translateY(10px) rotate(5deg)';
            charRight.style.transform = 'translateY(10px) rotate(-5deg)';
        }
        
        problemDisplay.textContent = `${num1} x ${num2} = ${correctAnswer}`;

        setTimeout(() => {
            charLeft.style.transform = 'translateY(0) rotate(0)';
            charRight.style.transform = 'translateY(0) rotate(0)';
            generateProblem();

        }, 2000);
    }
    
    function endReviewSession() {
        gameArea.classList.add('hidden');
        finalScoreArea.classList.remove('hidden');
        finalScoreDisplay.textContent = score;
        correctCountDisplay.textContent = correctCount;
        incorrectCountDisplay.textContent = incorrectCount;
        triggerConfetti();
    }
    
    // --- KEYPAD FUNCTIONS ---
    function appendNumber(num) {
        if (!isAnswering || currentAnswerString.length >= 4) return;
        currentAnswerString += num;
        updateAnswerDisplay();
    }

    function clearAnswer() {
        if (!isAnswering && currentAnswerString === '') return;
        currentAnswerString = '';
        updateAnswerDisplay();
    }

    function updateAnswerDisplay() {
        if (currentAnswerString === '') {
            answerDisplay.innerHTML = '&nbsp;';
        } else {
            answerDisplay.textContent = currentAnswerString;
        }
    }

    // --- TIMER & STATS ---
    function startTimer() {
        timerValue = 10;
        updateTimerDisplay();
        timerInterval = setInterval(() => {
            timerValue--;
            updateTimerDisplay();
            if (timerValue <= 0) {
                clearInterval(timerInterval);
                if (isAnswering) {
                    handleAnswerSubmission(); 
                }
            }
        }, 1000);
    }

    function updateTimerDisplay() {
        timerDisplay.textContent = `Thời gian: ${timerValue}`;
        timerBar.style.width = `${timerValue * 10}%`;
    }

    function updateStats() {
        scoreDisplay.textContent = `Điểm: ${score}`;
        questionCounterDisplay.textContent = `Câu: ${questionCounter}/${TOTAL_QUESTIONS}`;
    }

    // --- EFFECTS ---
    function triggerConfetti() {
        for (let i = 0; i < 50; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.animationDelay = Math.random() * 2 + 's';
            const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800'];
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.height = (Math.random() * 10 + 5) + 'px';
            confetti.style.width = (Math.random() * 5 + 5) + 'px';
            confettiContainer.appendChild(confetti);
            setTimeout(() => confetti.remove(), 2500);
        }
    }

    // Start the application
    init();
});
</script>
</body>
</html>
